@startuml
interface ComListener {
        # void onTrameReceived(String)
}

interface StateListener {
        + State : enum
        + void onStateChanged(State)
}

enum State{
        INITIAL
        CONNECTING
        CONNECTED
        DISCONNECTING
}

class Client {
        - m_com : CommunicationHandler
        - m_pseudo : String
        - m_connectWindow : ConnexionWindow
        - m_chatWindow : ChatClientWindow 
}

class CommunicationHandler {
        + {static} TIMEOUT : final int 
        - m_sock : Socket      
        - m_state : StateListener.State
        - m_stateListeners : ArrayList<StateListener>
        - m_comListeners : ArrayList<ComListener>
        - m_quit : boolean

        + void stop()
        - void changeState(StateListener.State)
        + StateListener.State getState()
        + CommunicationHandler()
        + addStateListener(StateListener)
        + addComListener(ComListener)
        + void configure(String, int)
        + void disconnect()
        + void post(String)
}

class ConnexionHandler {
	- m_sock : Socket
	- void interpret(String)
	- void receive(Byte[])
}

class ConnexionWindow {
}

class ChatClientWindow {
}

class ChatAdminWindow {
}

class ConnexionAdminWindow {
}

Runnable<|--ConnexionHandler
Client"1"*--ConnexionHandler
Client"1"*--ConnexionWindow
ConnexionWindow"1"*--ChatClientWindow
ConnexionWindow"1"*--ConnexionAdminWindow
ConnexionAdminWindow"1"*--ChatAdminWindow

class Server {
	- m_conversation : ArrayList<String>
	- m_userList : ArrayList<String>
	- m_adminList : ArrayList<String>
	- void interpret(String)
}

class ClientHandler {
	- m_state : State
	- m_sock : Socket
	- m_pseudonym : String
	- m_isAdmin : boolean
	- void interpret(String)
}

Server"1"*--"n"ClientHandler
Runnable<|--ClientHandler
@enduml